import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Home.module.css';
import MyLayout from '../../components/my/MyLayout';
// import CreatePost from '../../components/my/CreatePost';
import connectMongo from '../../utils/connectMongo'
import { User, Circle } from '../../models';
import { getCookie, getCookies } from 'cookies-next';
import { useRouter } from 'next/router';
import dynamic from 'next/dynamic';
import { useState, Suspense } from 'react';

export async function getServerSideProps(context) {
  const cookies = getCookies(context);
  if (cookies.token) {

    await connectMongo();
    let user = await User.findOne({ token: cookies.token },{_id: 1, username: 1, displayName: 1, email: 1,profile:1, prefs:1, createdAt:1,updatedAt:1,loginToken:1});
    if (user) {
      let circles = await Circle.find({ user: user._id });
      user = JSON.parse(JSON.stringify(user))
    circles = JSON.parse(JSON.stringify(circles));
    return {
      props: {user,circles}, // will be passed to the page component as props
    }
  }
  } else {
    return {
      props: {}, // will be passed to the page component as props
    }
    
  }


}

const CreatePost = dynamic(() => import('../../components/my/CreatePost'), {
  suspense: true,
})

export default function MyHome(props) {


  // const router = useRouter()
  // const token = getCookie("token");
  // if (!token) router.push('/login')
  return (
    <div className={`container dark`}>
      <Head>
        <title>Kowloon</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='grid w-full grid-cols-8'>
        <div className='col-span-2'>
        </div>

        <div className='col-span-4'>

            <Suspense fallback={`Loading...`}>
              <CreatePost circles={props.circles} user={props.user} editorKey={"editor"} />
            </Suspense>

        </div>
        </main>

    </div>
  )
}

MyHome.getLayout = function getLayout(page) {
    return (
      <MyLayout>
        {page}
      </MyLayout>
    )
  }
  
